package com.example.draganddrop;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

import org.cocos2d.events.CCTouchDispatcher;
import org.cocos2d.layers.CCColorLayer;
import org.cocos2d.layers.CCLayer;
import org.cocos2d.layers.CCScene;
import org.cocos2d.nodes.CCDirector;
import org.cocos2d.nodes.CCLabel;
import org.cocos2d.nodes.CCNode;
import org.cocos2d.nodes.CCSprite;
import org.cocos2d.types.CGPoint;
import org.cocos2d.types.CGSize;
import org.cocos2d.types.ccColor3B;
import org.cocos2d.types.ccColor4B;

import com.example.draganddrop.CommonItem.TouchState;

import android.util.Log;
import android.view.MotionEvent;

public class GameLayer extends CCColorLayer{
    
	public enum GameState{start,play,over};
	public GameState gamestate=GameState.start;
	public int playerPositionX=0;
	public int timeTick=0;
	public int timeSeconedTick=0;
	public int eachStageTime=10;
	public int stage=1;
	public int level=1;
	public int score=0;
	public int target=10;
	public final CGPoint QUESTION_POSITION=CGPoint.make(150,450);
	public final CGPoint TIME_BAR_POSITION=CGPoint.make(280,605);
	public final CGPoint GAME_START_POSITION=CGPoint.make(430,216);
	public final CGPoint CONFIRM_BUTTON_POSITION=CGPoint.make(1000,23);
	public final CGPoint QUESTION_TEXT_POSITION=CGPoint.make(100,400);
	public final CGPoint RESULT_POSITION=CGPoint.make(100,400);
	
	
	public final int TIME_BAR_HEIGHT=40;
	public final int TIME_BAR_WIDTH=768;
	public final int EACH_CARDS_COUNT=5;
	public CGPoint touchPoint;
	public Boolean isGamePause=true;
	public Boolean goToPrepare=true;
	public Boolean isSortMode=false;
	MySprite backGround;
	MySprite stateBar;
	MySprite TimeBar;
	//MySprite player;
	MySprite question_image;
	MySprite timeBar;
	MySprite result;
	Button gameStart;
	Button replay;
	Button pass;
	Button confirm_bt;
	//MySprite number;
	MySprite[] answers=new MySprite[5];
	//MyLabel question_text;
	
	CCLabel test_label;
	
    Number score_num;
    Number stage_num;
    Number target_num;
    //CCLabel test_label;
    Card.Style currenAnswer=Card.Style.red;
    Random gl_rnd;
    int question_choose=-1;
    CGPoint[] CardsPosition=new CGPoint[10];
    CGPoint[] AnswersPosition=new CGPoint[5];
    MyLabel[] easyQuestionLabels=new MyLabel[3];
    MyLabel[] sortQuestionLabels=new MyLabel[3];
	public static CCScene scene()
	{
	    CCScene scene = CCScene.node();
	    CCColorLayer layer = new GameLayer(ccColor4B.ccc4(255, 255, 255, 0));

	 
	    scene.addChild(layer);
	 
	    return scene;
	}
	protected GameLayer(ccColor4B color)
	{
		
	    super(color);
	    this.setIsTouchEnabled(true);
	    CGSize winSize = CCDirector.sharedDirector().displaySize();
	    CommonItem.SIZE_RATE_Y=(float)(winSize.height/CommonItem.GAME_HEIGHT);
	    CommonItem.SIZE_RATE_X=(float)(winSize.width/CommonItem.GAME_WIDTH);
	    CommonItem.gameLayer=this;
	    
	    Log.v("log","winSize.height:"+winSize.height);
	    Log.v("log","SIZE_RATE_Y"+ CommonItem.SIZE_RATE_Y);
	   // player = new MySprite("Player.png",true,CGPoint.zero(),0);
	   // player.sprite.setOpacity(90);
	    question_image= new MySprite("question.png",true,QUESTION_POSITION,-4);    
	    question_image.fixedSizeRate((float)1280/2500);
	    
	    backGround=new MySprite("bg_b.png",true,CGPoint.zero(),-5);
	    stateBar=new MySprite("StateBar.png",true,CGPoint.make(15, 555),-4);//this is the game back ground image
	    result=new MySprite("",false,RESULT_POSITION,1,2,-3);//if player click the confirm button,then this will show to indicate the result,correct or incorrect
	    
	    score_num=new Number(0,16,CGPoint.make(200, 650));
	    score_num.setNumber(score);
	    stage_num=new Number(0,16,CGPoint.make(630, 650));
	    stage_num.setNumber(stage);
	    target_num=new Number(0,16,CGPoint.make(960, 650));
	    target_num.setNumber(target);
	    timeBar=new MySprite("TimeBar.png",true,TIME_BAR_POSITION,-3);
	    //reorderChild(timeBar.sprite,4);
	    gameStart=new Button("GameStart.png",true,GAME_START_POSITION,0);
	    replay=new Button("replay.png",false,GAME_START_POSITION,0);
	    pass=new Button("Continue.png",false,GAME_START_POSITION,0);
	    
	    confirm_bt=new Button("confirm.png","confirm.png",CONFIRM_BUTTON_POSITION,true);
	    confirm_bt.fixedSizeRate(CommonItem.fixedSizeRate);
	    
	    
	    test_label=CCLabel.makeLabel("网地说道", "myfont.fnt", 25);
	    
	    test_label.setColor(new ccColor3B(0,0,0));
	    test_label.setPosition(300,200);
	    addChild(test_label,0);
	    gl_rnd=new Random();
	   // number=new MySprite("stageNumber.png",true,CGPoint.zero(),11,1,-3);
	    for(int i=0;i<3;i++)
	    {
	    	MyLabel question_text=new MyLabel(CommonItem.question.easyQuestion.question.get(i),QUESTION_TEXT_POSITION);
	    	question_text.setVisible(true);
	    	easyQuestionLabels[i]=question_text;
	    }
	    for(int i=0;i<3;i++)
	    {
	    	MyLabel question_text=new MyLabel(CommonItem.question.sortQuestion.question.get(i),QUESTION_TEXT_POSITION);
	    	question_text.setVisible(true);
	    	sortQuestionLabels[i]=question_text;
	    }
	  //preapare cards position
	    for(int i=0;i<2*5;i++)
	    {
	       CardsPosition[i]=CGPoint.make(530+(i%5)*150, 300-150*(i/5));
	    }
	  //prepare answers position
	    for(int i=0;i<5;i++)
	    {
	    	AnswersPosition[i]=CGPoint.make(480+i*150, 400);
	    }
	    Log.v("log","my");
	    try{
	    loadCards();
	    }
	    catch(Exception e){
	    	Log.v("log","loadcards error");
	    }
	    
		
	    
	   
	   // test_label=CCLabel.makeLabel("currenTouch:"+CommonItem.currenTouchState+"preCurrentTouch:"+CommonItem.preTouchState+"touchState:"+CommonItem.touchState+"xy:"+touchPoint,"Marker Felt", 30);
	    //test_label.setPosition(1000, 100);
	   // addChild(test_label,0);
	    //	    addChild(player.sprite);
//	    addChild(backGround.sprite,-5);
//	    addChild(stateBar.sprite,-4);
//	    addChild(question.sprite,-4);
//	    addChild(timeBar.sprite,-3);
//	    addChild(gameStart.sprite,-3);
//	    addChild(number.sprite,-3);
//	    addChild(replay.sprite,-3);
//	    addChild(pass.sprite,-3);
//	    Timer timer=new Timer();
//	    timer.scheduleAtFixedRate( new TimerTask(){
//			public void run() {
//				gameUpdate();
//			}
//		}, 0, (long)(1000/60) );
	   // schedule("gameUpdate",1/60.0f);
	    this.scheduleUpdate();
	}
	
	
	private void loadCards() {
		
		 for(int i=0;i<EACH_CARDS_COUNT;i++)
	   	 {
		    Card cardSprite=new Card("red-"+(i+1)+".png",false,CGPoint.zero());
		    cardSprite.style=Card.Style.red;
		    cardSprite.id=i;
		    cardSprite.fixedSizeRate(CommonItem.fixedSizeRate);
		    
	   		try{
	   			CommonItem.redCards[i]=cardSprite;
	   			CommonItem.allCards.add(cardSprite);
	   		}catch(Exception e){
	   			Log.v("log","error:"+e);
	   		}
	   		
	   		
	   	 }
	   	 for(int i=0;i<EACH_CARDS_COUNT;i++)
	   	 {
	   		Card cardSprite=new Card("blue-"+(i+1)+".png",false,CGPoint.zero());
	   		CommonItem.blueCards[i]=cardSprite;
	   	    cardSprite.style=Card.Style.blue;
		    cardSprite.id=i;
	   		CommonItem.allCards.add(cardSprite);
	   		cardSprite.fixedSizeRate(CommonItem.fixedSizeRate);
	   		
	   	 }
	   	 for(int i=0;i<EACH_CARDS_COUNT;i++)
	   	 {
	   		Card cardSprite=new Card("green-"+(i+1)+".png",false,CGPoint.zero());
	   		CommonItem.greenCards[i]=cardSprite;
	   	    cardSprite.style=Card.Style.green;
		    cardSprite.id=i;
	   		CommonItem.allCards.add(cardSprite);
	   		cardSprite.fixedSizeRate(CommonItem.fixedSizeRate);
	   		
	   	 }
	   	 for(int i=0;i<5;i++)
	   	 {
	   		 
	   		 MySprite answer=new MySprite("answer_frame.png",false,AnswersPosition[i],-4);
	   		 answers[i]=answer;
	   		 answer.fixedSizeRate(CommonItem.fixedSizeRate);
	   	 }
		
	}
	public void update(float dt) {	
		
		CommonItem.currenTouchState=CommonItem.touchState;
		touchPoint=CommonItem.touchPoint;
		spriteRectAndeventUpdate();
       //test_label.setString("currenTouch: "+CommonItem.currenTouchState+"  preCurrentTouch:"+CommonItem.preTouchState+"  touchState: "+CommonItem.touchState+"  xy: "+touchPoint);
		
		//question_choose++;
		//test_label.setString("你是谁！"+question_choose);
//		if(tap())
//		{
//			stage++;
//			stage_num.setNumber(stage);
//		}
		switch(gamestate)
		{
		   case start:
			    gameStart.mySetVisible(true);
			    replay.mySetVisible(false);
			    pass.mySetVisible(false);
				gamestate=GameState.play;
			    break;
		   case play:
			   
			   if(isGamePause==false)
			   {
				   timeUpdate();
				   if(goToPrepare==true)
				   {
					   
					   goToPrepare=false;
					   question_choose=gl_rnd.nextInt(2);
					   prepareQuestion(question_choose);
				       prepareCards();
				   }		  
				   cardsPositionUpdate();
			   }
			   
			   break;
		   case over:
			   break;
		   
		}
		CommonItem.preTouchState=CommonItem.currenTouchState;
//		playerPositionX+=CommonItem.dt;
//		player.setPosition(playerPositionX, 0);
//		if(playerPositionX>=1500)CommonItem.dt=-1;
//		if(playerPositionX<0)CommonItem.dt=1;
		
		//CommonItem.preTouchState=CommonItem.currenTouchState;
		//CommonItem.touchState=CommonItem.TouchState.none;
	}
	private void cardsPositionUpdate() {
		
		for(Card card:CommonItem.allCards)
		{
			if(card.getVisible()==true)
			{
				card.collisionRectUpdate();
				

				if(card.isTouched==true)
				{
					
					if(card.collisionRect.contains(CommonItem.touchPoint)&&CommonItem.currenTouchState==CommonItem.TouchState.move)
					{
					///allCards[i].setPosition(CommonItem.touchPoint.x-50,CommonItem.touchPoint.y-50);
						card.setPosition((CommonItem.touchPoint.x),(CommonItem.touchPoint.y));
					}
				}
		   }
		
		}
	}
	private void prepareCards() {
		if(isSortMode==false)
		{
			if(question_choose==0)
			{
				int temp=gl_rnd.nextInt(CommonItem.question.easyQuestion.level.get(stage).maxNumber-CommonItem.question.easyQuestion.level.get(stage).minNumber)+CommonItem.question.easyQuestion.level.get(stage).minNumber;
				for(int i=0;i<CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					answers[i].setVisible(true);
				}
				for(int i=0;i<=CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					int temp2=gl_rnd.nextInt(5);
					CommonItem.redCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
					CommonItem.redCards[temp2].setVisible(true);
					Log.v("log","redCards prepared");
				}
				for(int i=0;i<=temp-CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					int temp3=gl_rnd.nextInt(5);
					CGPoint position;
					while(true)
					{
					    position=CardsPosition[gl_rnd.nextInt(10)];
						if(thisPoistionHasNoCard(position))
						{
							break;
						}
					}
					if(i%2==0)
					{
						CommonItem.blueCards[temp3].setPosition_ds(position);
						CommonItem.blueCards[temp3].setVisible(true);
						Log.v("log","blueCards prepared");
					}else
					{
						CommonItem.greenCards[temp3].setPosition_ds(position);
						CommonItem.greenCards[temp3].setVisible(true);
						Log.v("log","greenCards prepared");
					}
				}
			}
			if(question_choose==1)
			{
				int temp=gl_rnd.nextInt(CommonItem.question.easyQuestion.level.get(stage).maxNumber-CommonItem.question.easyQuestion.level.get(stage).minNumber)+CommonItem.question.easyQuestion.level.get(stage).minNumber;
				for(int i=0;i<CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					answers[i].setVisible(true);
				}
				for(int i=0;i<=CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					int temp2=gl_rnd.nextInt(5);
					CommonItem.blueCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
					CommonItem.blueCards[temp2].setVisible(true);
					Log.v("log","blueCards prepared");
				}
				for(int i=0;i<=temp-CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
				{
					int temp3=gl_rnd.nextInt(5);
					CGPoint position;
					while(true)
					{
					    position=CardsPosition[gl_rnd.nextInt(10)];
						if(thisPoistionHasNoCard(position))
						{
							break;
						}
					}
					if(i%2==0)
					{
					CommonItem.redCards[temp3].setPosition_ds(position);
					CommonItem.redCards[temp3].setVisible(true);
					//Log.v("log","blueCards prepared");
					}else
					{
						CommonItem.greenCards[temp3].setPosition_ds(position);
						CommonItem.greenCards[temp3].setVisible(true);
						//Log.v("log","greenCards prepared");
					}
				}
	    	}
			
		
		if(question_choose==2)
		{
			int temp=gl_rnd.nextInt(CommonItem.question.easyQuestion.level.get(stage).maxNumber-CommonItem.question.easyQuestion.level.get(stage).minNumber)+CommonItem.question.easyQuestion.level.get(stage).minNumber;
			for(int i=0;i<CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
			{
				answers[i].setVisible(true);
			}
			for(int i=0;i<=CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
			{
				int temp2=gl_rnd.nextInt(5);
				CommonItem.greenCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
				CommonItem.greenCards[temp2].setVisible(true);
				Log.v("log","greenCards prepared");
			}
			for(int i=0;i<=temp-CommonItem.question.easyQuestion.level.get(stage).answerNumber;i++)
			{
				int temp3=gl_rnd.nextInt(5);
				CGPoint position;
				while(true)
				{
				    position=CardsPosition[gl_rnd.nextInt(10)];
					if(thisPoistionHasNoCard(position))
					{
						break;
					}
				}
				if(i%2==0)
				{
					CommonItem.redCards[temp3].setPosition_ds(position);
					CommonItem.redCards[temp3].setVisible(true);
					//Log.v("log","blueCards prepared");
				}else
				{
					CommonItem.blueCards[temp3].setPosition_ds(position);
					CommonItem.blueCards[temp3].setVisible(true);
					//Log.v("log","greenCards prepared");
				}
			}
		
		}
	  }//is sord =false
		else
	  {
			if(question_choose==0)
			{
				int temp=gl_rnd.nextInt(CommonItem.question.sortQuestion.level.get(stage).maxNumber-CommonItem.question.sortQuestion.level.get(stage).minNumber)+CommonItem.question.sortQuestion.level.get(stage).minNumber;
				for(int i=0;i<CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					answers[i].setVisible(true);
				}
				for(int i=0;i<=CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					int temp2=gl_rnd.nextInt(5);
					CommonItem.redCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
					CommonItem.redCards[temp2].setVisible(true);
					Log.v("log","redCards prepared");
				}
				for(int i=0;i<=temp-CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					int temp3=gl_rnd.nextInt(5);
					CGPoint position;
					while(true)
					{
					    position=CardsPosition[gl_rnd.nextInt(10)];
						if(thisPoistionHasNoCard(position))
						{
							break;
						}
					}
					if(i%2==0)
					{
						CommonItem.blueCards[temp3].setPosition_ds(position);
						CommonItem.blueCards[temp3].setVisible(true);
						Log.v("log","blueCards prepared");
					}else
					{
						CommonItem.greenCards[temp3].setPosition_ds(position);
						CommonItem.greenCards[temp3].setVisible(true);
						Log.v("log","greenCards prepared");
					}
				}
			}
			if(question_choose==1)
			{
				int temp=gl_rnd.nextInt(CommonItem.question.sortQuestion.level.get(stage).maxNumber-CommonItem.question.sortQuestion.level.get(stage).minNumber)+CommonItem.question.sortQuestion.level.get(stage).minNumber;
				for(int i=0;i<CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					answers[i].setVisible(true);
				}
				for(int i=0;i<=CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					int temp2=gl_rnd.nextInt(5);
					CommonItem.blueCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
					CommonItem.blueCards[temp2].setVisible(true);
					Log.v("log","blueCards prepared");
				}
				for(int i=0;i<=temp-CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
				{
					int temp3=gl_rnd.nextInt(5);
					CGPoint position;
					while(true)
					{
					    position=CardsPosition[gl_rnd.nextInt(10)];
						if(thisPoistionHasNoCard(position))
						{
							break;
						}
					}
					if(i%2==0)
					{
					CommonItem.redCards[temp3].setPosition_ds(position);
					CommonItem.redCards[temp3].setVisible(true);
					//Log.v("log","blueCards prepared");
					}else
					{
						CommonItem.greenCards[temp3].setPosition_ds(position);
						CommonItem.greenCards[temp3].setVisible(true);
						//Log.v("log","greenCards prepared");
					}
				}
	    	}
			
		
		if(question_choose==2)
		{
			int temp=gl_rnd.nextInt(CommonItem.question.sortQuestion.level.get(stage).maxNumber-CommonItem.question.sortQuestion.level.get(stage).minNumber)+CommonItem.question.sortQuestion.level.get(stage).minNumber;
			for(int i=0;i<CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
			{
				answers[i].setVisible(true);
			}
			for(int i=0;i<=CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
			{
				int temp2=gl_rnd.nextInt(5);
				CommonItem.greenCards[temp2].setPosition_ds(CardsPosition[9-temp2]);
				CommonItem.greenCards[temp2].setVisible(true);
				Log.v("log","greenCards prepared");
			}
			for(int i=0;i<=temp-CommonItem.question.sortQuestion.level.get(stage).answerNumber;i++)
			{
				int temp3=gl_rnd.nextInt(5);
				CGPoint position;
				while(true)
				{
				    position=CardsPosition[gl_rnd.nextInt(10)];
					if(thisPoistionHasNoCard(position))
					{
						break;
					}
				}
				if(i%2==0)
				{
					CommonItem.redCards[temp3].setPosition_ds(position);
					CommonItem.redCards[temp3].setVisible(true);
					//Log.v("log","blueCards prepared");
				}else
				{
					CommonItem.blueCards[temp3].setPosition_ds(position);
					CommonItem.blueCards[temp3].setVisible(true);
					//Log.v("log","greenCards prepared");
				}
			}
		
		}
	  }
	}
	//prepare answerCards
	private void prepareQuestion(int temp) {
		try{
			//int	temp=gl_rnd.nextInt(9);
			for(MyLabel label:easyQuestionLabels)
			{
				if(label.label.getVisible()==true)
				{
				   label.setVisible(false);
				}
			}
			for(MyLabel label:sortQuestionLabels)
			{
				if(label.label.getVisible()==true)
				{
				   label.setVisible(false);
				}
			}
			
			
			int random2=gl_rnd.nextInt(1);
			
				currenAnswer=Card.Style.red;
				if(random2==0)
				{
					isSortMode=false;
			    	easyQuestionLabels[temp].setVisible(true);
				}
				else
				{
					isSortMode=true;
					sortQuestionLabels[temp].setVisible(true);
				}
			
			
			
		}
		catch(Exception e)
		{
			Log.v("log","prepare answerCards errror!"+e+CommonItem.question.easyQuestion.question);
		}
		
	}
	public void spriteRectAndeventUpdate() {
		if(gameStart.getVisible()==true)
		{

		  if(gameStart.isClicked==true)
		  {
			  gameStart.isClicked=false;
			  gameStart.mySetVisible(false);
			  isGamePause=false;
			  Log.v("log","gameStartEct_Z:"+gameStart.getZOrder()+replay.getZOrder()+pass.getZOrder());
		  }
		}
		if(pass.getVisible()==true)
		{
			
		  if(pass.isClicked==true)
		  {
			  pass.isClicked=false;
			  pass.mySetVisible(false);
			  isGamePause=false;
			  goToPrepare=true;
			  stage++;
			  stage_num.setNumber(stage);
			  score=0;
			  score_num.setNumber(score);
			  target++;
			  target_num.setNumber(target);
			  goToNextStage();
		  }
		}
		if(replay.getVisible()==true)
		{
			
		  if(replay.isClicked==true)
		  {
			  replay.isClicked=false;
			  replay.mySetVisible(false);
			  isGamePause=false;
			  goToPrepare=true;
			  score=0;
			  score_num.setNumber(score);
		  }
		}
		if(confirm_bt.getVisible()==true)
		{
			 if(confirm_bt.isClicked==true)
			 {
				 confirm_bt.isClicked=false;
				 confirm_bt.setVisible(false);
				 //if all answers place were holding card and those cards,which were holden were the same style to the current answer style
				 if(isAllAnswerHoldCard()&&isAllCardStyleRight())
				 {
					 if(isSortMode==false)
					 {
						 result.currentFrameY=0;
						 
					 }
					 else
					 {
						 if(isCardInOrder())
						 {
							 result.currentFrameY=0;
							 
						 }
						 else
						 {
							 result.currentFrameY=1;
							 
						 }
					 }
				 }
				 else
				 {
					 result.currentFrameY=1;
					 
				 }
				 result.rectUpdate();
				 result.setVisible(true);
			 }
		}
		
	}
	
	private boolean isCardInOrder() {
		Card tempCard=null;
		Array[] cards=new Array[5];
		switch(question_choose)
		{
		case 0:
			
		}
		for(int i=0;i<5;i++)
		{
			if(CommonItem.redCards[i].isInAnswerPlace==true&&CommonItem.redCards[i].getVisible()==true)
			{
				if(tempCard==null)
				{
					tempCard=CommonItem.redCards[i];
				}
				else
				{
					if(tempCard.getPosition().x<CommonItem.redCards[i].getPosition().x)
					{
						tempCard=CommonItem.redCards[i];				
					}
					else
					{
						return false;
					}
				}
			}
		}
		 
		return true;
	}
	private boolean isAllCardStyleRight() {
		for(Card card:CommonItem.allCards)
		{
			if(card.getVisible()==true&&card.isInAnswerPlace==true&&card.style!=currenAnswer)
			{
				return false;
			}
				
		}
		return true;
	}
	private boolean isAllAnswerHoldCard() {
		for(MySprite answer:answers)
		{
			if(answer.sprite.getVisible()==true&&answer.isHoldCard==false)
			{
				return false;
			}
		}
		return true;
	}
	//ready next stage things 
	private void goToNextStage() {
		
		
	}
	//if is tap in screen
//	private boolean tap() {
//		if(CommonItem.currenTouchState==CommonItem.TouchState.up&&CommonItem.preTouchState==CommonItem.TouchState.down)//&&CommonItem.currenTouchState==CommonItem.TouchState.up)
//		{
//			score++;
//			score_num.setNumber(score);
//			Log.v("touchState","tap");
//			Log.v("touchState","pisition:"+touchPoint.toString());
//			return true;
//		}
//		return false;
//	}
	public void timeUpdate() {
		timeTick++;
		
		if(timeTick>=60)
		{
			
		   timeTick=0;
		   timeSeconedTick++;
			Log.v("log",""+timeSeconedTick);//log
		   if(timeSeconedTick>=eachStageTime)
		   {
			   timeSeconedTick=0;
			   isGamePause=true;
			   if(score>=target)
			   {
				   pass.mySetVisible(true);
			   }
			   else
			   {
				   replay.mySetVisible(true);
			   }
		   }
		   timeBar.sprite.setTextureRect(0, 0, ((float)(eachStageTime-timeSeconedTick)/eachStageTime)*TIME_BAR_WIDTH,40 , false);
		}
	}
	
		//@Override
        public boolean ccTouchesBegan(MotionEvent event) {
            CGPoint convertedLocation = CCDirector.sharedDirector()
            	.convertToGL(CGPoint.make(event.getX(), event.getY()));

            target++;
            target_num.setNumber(target);
           // CommonItem.touchState=CommonItem.TouchState.down;
           // CCNode s = getChildByTag(kTagSprite);
            //s.stopAllActions();
            //s.runAction(CCMoveTo.action(1.0f, convertedLocation));
           
            //CGPoint pnt = s.getPosition();

           // float at = CGPoint.ccpCalcRotate(pnt, convertedLocation);

            //s.runAction(CCRotateTo.action(1, at));
            
            //progressTimer.setPercentage(10.0f + progressTimer.getPercentage());

            return CCTouchDispatcher.kEventHandled;
        }
        public boolean ccTouchesMoved(MotionEvent event) {
        	//CommonItem.touchState=CommonItem.TouchState.move;
            return CCTouchDispatcher.kEventIgnored;  // TODO Auto-generated method stub
        }

        public boolean ccTouchesEnded(MotionEvent event) {
        	//CommonItem.touchState=CommonItem.TouchState.up;
        	for(MySprite sp: answers)
        	{
        		if(sp.getVisible()==true&&sp.isHoldCard==false)
        		{
		    		for(Card card: CommonItem.allCards)
		    		{
		    			if(card.getVisible()==true&&card.isInAnswerPlace==false)
		    			{
			    			if(sp.collisionRect.contains(card.getPosition()))
			    			{
			                    card.setPosition(sp.sprite.getPosition()); 
			                    sp.isHoldCard=true;
			                    card.isInAnswerPlace=true;
			    			}
		    			}
		    		}
        		}
        	}
        	
            return CCTouchDispatcher.kEventIgnored;  // TODO Auto-generated method stub
        }
       
        public boolean thisPoistionHasNoCard(CGPoint position)
        {
        	for(Card card: CommonItem.redCards)
        	{
        		if(card.getVisible()==true&&card.getPosition()==position)return false;
        	}
        	for(Card card: CommonItem.blueCards)
        	{
        		if(card.getVisible()==true&&card.getPosition()==position)return false;
        	}
        	for(Card card: CommonItem.greenCards)
        	{
        		if(card.getVisible()==true&&card.getPosition()==position)return false;
        	}
        	return true;
        }
}
